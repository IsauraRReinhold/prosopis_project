######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[rev(c(4,1,2,3))])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,
labels =c("S" ="Complete (C) and single-copy (S)",
"D" = "Complete (C) and duplicated (D)",
"F" = "Fragmented (F)",
"M" = "Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
######################################
#
# BUSCO summary figure
# @version 3.0.0
# @since BUSCO 2.0.0
#
# Copyright (c) 2016-2017, Evgeny Zdobnov (ez@ezlab.org)
# Licensed under the MIT license. See LICENSE.md file.
#
######################################
# Load the required libraries
library("ggplot2")
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste("/home/cris/Documentos/EpiDiso/Disocactus_transcriptome/out/BUSCO_summaries/","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- rev(c("#56B4E9", "#3492C7", "#F0E442", "#F04442"))
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Assessment Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('DE_trans', 'DE_trans', 'DE_trans', 'DE_trans', 'DS_trans', 'DS_trans', 'DS_trans', 'DS_trans')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(10.8, 77.2, 3.6, 8.4, 8.8, 75.9, 4.4, 10.9)
my_values <- c(156, 1111, 52, 121, 127, 1093, 63, 157)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[rev(c(4,1,2,3))])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,
labels =c("S" ="Complete (C) and single-copy (S)",
"D" = "Complete (C) and duplicated (D)",
"F" = "Fragmented (F)",
"M" = "Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill = guide_legend(reverse=T))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
######################################
#
# BUSCO summary figure
# @version 3.0.0
# @since BUSCO 2.0.0
#
# Copyright (c) 2016-2017, Evgeny Zdobnov (ez@ezlab.org)
# Licensed under the MIT license. See LICENSE.md file.
#
######################################
# Load the required libraries
library("ggplot2")
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste("/home/cris/Documentos/EpiDiso/Disocactus_transcriptome/out/BUSCO_summaries/","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- rev(c("#56B4E9", "#3492C7", "#F0E442", "#F04442"))
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Assessment Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('D_eichlamii_trans', 'D_eichlamii_trans', 'D_eichlamii_trans', 'D_eichlamii_trans', 'D_speciosus_trans', 'D_speciosus_trans', 'D_speciosus_trans', 'D_speciosus_trans')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(10.8, 77.2, 3.6, 8.4, 8.8, 75.9, 4.4, 10.9)
my_values <- c(156, 1111, 52, 121, 127, 1093, 63, 157)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[rev(c(4,1,2,3))])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,
labels =c("S" ="Complete (C) and single-copy (S)",
"D" = "Complete (C) and duplicated (D)",
"F" = "Fragmented (F)",
"M" = "Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill = guide_legend(reverse=T))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
######################################
#
# BUSCO summary figure
# @version 3.0.0
# @since BUSCO 2.0.0
#
# Copyright (c) 2016-2017, Evgeny Zdobnov (ez@ezlab.org)
# Licensed under the MIT license. See LICENSE.md file.
#
######################################
# Load the required libraries
library("ggplot2")
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste("/home/cris/Documentos/EpiDiso/Disocactus_transcriptome/out/BUSCO_summaries/","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- rev(c("#56B4E9", "#3492C7", "#F0E442", "#F04442"))
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Assessment Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('D_eichlamii_trans', 'D_eichlamii_trans', 'D_eichlamii_trans', 'D_eichlamii_trans', 'D_speciosus_trans', 'D_speciosus_trans', 'D_speciosus_trans', 'D_speciosus_trans')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(10.8, 77.2, 3.6, 8.4, 8.8, 75.9, 4.4, 10.9)
my_values <- c(156, 1111, 52, 121, 127, 1093, 63, 157)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[rev(c(4,1,2,3))])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,
labels =c("S" ="Complete (C) and single-copy (S)",
"D" = "Complete (C) and duplicated (D)",
"F" = "Fragmented (F)",
"M" = "Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill = guide_legend(reverse=T))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
load("~/Documentos/EpiDiso/Disocactus_transcriptome/data/dif_exp_analysis/DE/DE_sig_genes.RData")
DE_id_genes
head(DE_id_genes)
#load data
DE_id_genes %>%
dplyr::rename(genes = `eggno_DE.genes`)
#libraries
library(tidyverse)
library(pheatmap)
library(dplyr)
library(SummarizedExperiment)
library(gplots)
library(RColorBrewer)
library(mixOmics)
DE_id_genes %>%
dplyr::rename(genes = `eggno_DE.genes`)
head(DE_id_genes)
DE_id_genes %>%
dplyr::rename(genes = `eggno_DE.genes`)
head(DE_id_genes)
View(DE_id_genes)
#load data
DE_id_genes %>%
dplyr::rename(genes = "eggno_DE.genes")
head(DE_id_genes)
#load data
DE_id_genes %>% dplyr::rename(genes = "eggno_DE.genes")
head(DE_id_genes)
#load data
DE_id_genes %>% dplyr::rename(genes = eggno_DE.genes)
head(DE_id_genes)
#load data
DE_id_genes %>% rename( DE_id_genes, genes = eggno_DE.genes)
#load data
DE_id_genes %>% rename( DE_id_genes, genes = 'eggno_DE.genes')
#load data
DE_id_genes %>% rename( DE_id_genes, genes = "eggno_DE.genes")
head(DE_id_genes)
#load data
rename(DE_id_genes, genes = "eggno_DE.genes")
#load data
rename(DE_id_genes, genes = eggno_DE.genes)
#load data
rename(DE_id_genes, genes = `eggno_DE.genes`)
head(DE_id_genes)
#cat data
significant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes, by = "genes")
#load data
DE_ig_genes<-DE_id_genes %>% rename(genes = `eggno_DE.genes`)
#load data
DE_ig_genes<-DE_id_genes %>% rename(., genes = `eggno_DE.genes`)
head(DE_id_genes)
View(significant.cpm)
significant.cpm %>%rename(., rownames = genes)
significant.cpm %>%rename(., genes = rownames)
significant.cpm %>%rename(., genes = `rownames`)
#load data
DE_id_genes<-DE_id_genes %>% rename(., genes = `eggno_DE.genes`)
head(DE_id_genes)
head(significant.cpm)
significant.cpm %>%rename(., genes = `rowname`)
#load data
DE_id_genes<-DE_id_genes %>% rename(., `eggno_DE.genes` = genes)
significant.cpm %>%rename(., `rowname` = genes)
#load data
DE_id_genes %>% rename(`eggno_DE.genes` = genes)
#load data
DE_id_genes %>% rename(`eggno_DE.genes` = "genes")
significant.cpm %>%rename(`rowname` = "genes")
View(DE_id_genes)
View(significant.cpm)
#load data
DE_id_genes<-DE_id_genes %>% rename(`eggno_DE.genes` = "genes")
significant.cpm<-significant.cpm %>%rename(`rowname` = "genes")
View(DE_id_genes)
View(significant.cpm)
significant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes, by = "genes")
View(significant.cpm)
#load data
DE_id_genes<-DE_id_genes %>% rename(`eggno_DE.genes` = "id_genes")
significant.cpm<-significant.cpm %>%rename(`rowname` = "genes")
#load data
DE_id_genes<-DE_id_genes %>% rename("genes" = "id_genes")
significant.cpm<-significant.cpm %>%rename(`rowname` = "genes")
cat(significant.cpm, file = DE_id_genes)
cat(significant.cpm, DE_id_genes)
ignificant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes)
significant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes)
BiocManager::install("goseq")
BiocManager::install("GOstats")
library("goseq")
library("GOstats")
?power
BiocManager::install("Rsubread")
load("/media/cris/Ulises/prosopis_project/bin/clusters.RData")
data_with_cust_info
data_with_cust_info <- data %>%
mutate(clust = paste("clust_", kmeans_out$cluster,sep = ""))
library(tidyverse)
library(dplyr)
mutate(clust = paste("clust_", kmeans_out$cluster,sep = ""))
## add cluster info to orig matrix
data_with_cust_info <- data %>%
mutate(clust = paste("clust_", kmeans_out$cluster,sep = ""))
head(data_with_cust_info)
p
p<-data_with_cust_info %>%
gather(key = "month" , value = "log2CPM", -c(1,20)) %>%  ### 1 is the index of column 'geneName' and 20 is the index of column 'clust'
group_by(month)
p
p$clust
p$clust<-factor(p$clust, levels = c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
"clust_15", "clust_16"))
view(p)
pp <- p %>%
separate(month, c("sample", "month"), sep = "_")
head(pp)
pp$clust<-factor(pp$clust, levels = c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
"clust_15", "clust_16"))
pp$clust<-factor(pp$clust, levels = c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
head(pp)                                    "clust_15", "clust_16"))
pp$clust<-factor(pp$clust, levels = c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
"clust_15", "clust_16"))
head(pp)
pp$month <- factor(pp$month, levels = c("2", "4", "6", "8", "10", "12"))
head(pp)
pp<-as.data.frame(pp)
pp$clust<-factor(pp$clust, levels = c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
"clust_15", "clust_16"))
head(pp)
pp$month <- factor(pp$month, levels = c("2", "4", "6", "8", "10", "12"))
head(pp)
pp %>%
mutate(across(pp, factor, levels=c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
"clust_15", "clust_16"))) %>%
ggplot() +
geom_histogram(aes(month))+
facet_grid(clust)
class(pp)
pp<-as.factor(pp)
pp %>%
mutate(across(pp, factor, levels=c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
"clust_15", "clust_16"))) %>%
ggplot() +
geom_histogram(aes(month))+
facet_grid(clust)
pp %>%
mutate(across(pp, factor(pp$month), levels=c("clust_1", "clust_2", "clust_3", "clust_4", "clust_5",
"clust_6", "clust_7", "clust_8", "clust_9",
"clust_10", "clust_11", "clust_12", "clust_13", "clust_14",
"clust_15", "clust_16"))) %>%
ggplot() +
geom_histogram(aes(month))+
facet_grid(clust)
BiocManager::install("topGO")
library("topGO")
library("ALL")
BiocManager::install("ALL")
data(ALL)
data(ALL)
library("ALL")
data(ALL)
data(geneList)
annotacion <- read.table("../data/PC_final_protein.fasta.Uniprot_22_06_22.blastp_annotation.txt", sep = "\t")
setwd("~/Documentos/Prosopis_project/bin")
annotacion <- read.table("../data/PC_final_protein.fasta.Uniprot_22_06_22.blastp_annotation.txt", sep = "\t")
annotacion <- read.table("../data/annotation_blastp_annotation.csv", sep = "\t")
annotacion <- read.table("../data/annotation_blastp_annotation.tsv", sep = "\t")
annotacion <- read.table("../data/annotation_blastp_annotation.tsv", sep = "\t")
head(annotacion)
?sed
gsub(", ", ";", annotacion$V2)
gsub(";", ", ", annotacion$V2)
annotacion$V2 <- gsub(";", ", ", annotacion$V2)
head(annotacion)
readMappings(annotacion)
library("topGO")
readMappings(annotacion)
annotacion
GobyID<-readMappings(file = file_temp)
GobyID<-readMappings(file = annotacion)
class(annotacion)
