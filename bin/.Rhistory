library("ggplot2")
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste("/home/cris/Documentos/EpiDiso/Disocactus_transcriptome/out/BUSCO_summaries/","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- rev(c("#56B4E9", "#3492C7", "#F0E442", "#F04442"))
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Assessment Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('D_eichlamii_trans', 'D_eichlamii_trans', 'D_eichlamii_trans', 'D_eichlamii_trans', 'D_speciosus_trans', 'D_speciosus_trans', 'D_speciosus_trans', 'D_speciosus_trans')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(10.8, 77.2, 3.6, 8.4, 8.8, 75.9, 4.4, 10.9)
my_values <- c(156, 1111, 52, 121, 127, 1093, 63, 157)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[rev(c(4,1,2,3))])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,
labels =c("S" ="Complete (C) and single-copy (S)",
"D" = "Complete (C) and duplicated (D)",
"F" = "Fragmented (F)",
"M" = "Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill = guide_legend(reverse=T))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
load("~/Documentos/EpiDiso/Disocactus_transcriptome/data/dif_exp_analysis/DE/DE_sig_genes.RData")
DE_id_genes
head(DE_id_genes)
#load data
DE_id_genes %>%
dplyr::rename(genes = `eggno_DE.genes`)
#libraries
library(tidyverse)
library(pheatmap)
library(dplyr)
library(SummarizedExperiment)
library(gplots)
library(RColorBrewer)
library(mixOmics)
DE_id_genes %>%
dplyr::rename(genes = `eggno_DE.genes`)
head(DE_id_genes)
DE_id_genes %>%
dplyr::rename(genes = `eggno_DE.genes`)
head(DE_id_genes)
View(DE_id_genes)
#load data
DE_id_genes %>%
dplyr::rename(genes = "eggno_DE.genes")
head(DE_id_genes)
#load data
DE_id_genes %>% dplyr::rename(genes = "eggno_DE.genes")
head(DE_id_genes)
#load data
DE_id_genes %>% dplyr::rename(genes = eggno_DE.genes)
head(DE_id_genes)
#load data
DE_id_genes %>% rename( DE_id_genes, genes = eggno_DE.genes)
#load data
DE_id_genes %>% rename( DE_id_genes, genes = 'eggno_DE.genes')
#load data
DE_id_genes %>% rename( DE_id_genes, genes = "eggno_DE.genes")
head(DE_id_genes)
#load data
rename(DE_id_genes, genes = "eggno_DE.genes")
#load data
rename(DE_id_genes, genes = eggno_DE.genes)
#load data
rename(DE_id_genes, genes = `eggno_DE.genes`)
head(DE_id_genes)
#cat data
significant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes, by = "genes")
#load data
DE_ig_genes<-DE_id_genes %>% rename(genes = `eggno_DE.genes`)
#load data
DE_ig_genes<-DE_id_genes %>% rename(., genes = `eggno_DE.genes`)
head(DE_id_genes)
View(significant.cpm)
significant.cpm %>%rename(., rownames = genes)
significant.cpm %>%rename(., genes = rownames)
significant.cpm %>%rename(., genes = `rownames`)
#load data
DE_id_genes<-DE_id_genes %>% rename(., genes = `eggno_DE.genes`)
head(DE_id_genes)
head(significant.cpm)
significant.cpm %>%rename(., genes = `rowname`)
#load data
DE_id_genes<-DE_id_genes %>% rename(., `eggno_DE.genes` = genes)
significant.cpm %>%rename(., `rowname` = genes)
#load data
DE_id_genes %>% rename(`eggno_DE.genes` = genes)
#load data
DE_id_genes %>% rename(`eggno_DE.genes` = "genes")
significant.cpm %>%rename(`rowname` = "genes")
View(DE_id_genes)
View(significant.cpm)
#load data
DE_id_genes<-DE_id_genes %>% rename(`eggno_DE.genes` = "genes")
significant.cpm<-significant.cpm %>%rename(`rowname` = "genes")
View(DE_id_genes)
View(significant.cpm)
significant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes, by = "genes")
View(significant.cpm)
#load data
DE_id_genes<-DE_id_genes %>% rename(`eggno_DE.genes` = "id_genes")
significant.cpm<-significant.cpm %>%rename(`rowname` = "genes")
#load data
DE_id_genes<-DE_id_genes %>% rename("genes" = "id_genes")
significant.cpm<-significant.cpm %>%rename(`rowname` = "genes")
cat(significant.cpm, file = DE_id_genes)
cat(significant.cpm, DE_id_genes)
ignificant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes)
significant.cpm %>%
as_tibble() %>%
left_join(., DE_id_genes)
BiocManager::install("goseq")
BiocManager::install("GOstats")
library("goseq")
library("GOstats")
?power
BiocManager::install("Rsubread")
#Charge data
count_matrix<-read.table("../out/count_matrix/prosopis_count_matrix.txt", header = TRUE,
stringsAsFactors = FALSE)
#set workdir
setwd("~/Documentos/Prosopis_project/bin/")
#Charge data
count_matrix<-read.table("../out/count_matrix/prosopis_count_matrix.txt", header = TRUE,
stringsAsFactors = FALSE)
View(count_matrix)
count_matrix
head(count_matrix)
colnames(count_matrix) <- c("Gene_id","Chr","Start","End","Strand","Length",
"Ghaf12DT_002_CGATGT_L007","Ghaf2DT_005_ACAGTG_L007",
"Ghaf4DT_006_GCCAAT_L007","Ghaf6DT_007_CAGATC_L007",
"Ghaf8DT_009_GATCAG_L007","PCDT3.10b","PCDT3.12","PCDT3.2b",
"PCDT3.4b","PCDT3.6","PCDT3.8","PCDT4.10b","PCDT5.4b",
"PCDT5.8b","PDT5_10","PDT5_2","PDT5_6")
View(count_matrix)
meta_pros<-read.table("../metadata/meta.txt", header = T)
head(meta_pros)
library(ggplot2)
library(tidyverse)
#set workdir
setwd("~/Documentos/Prosopis_project/bin/")
#Charge data
count_matrix<-read.table("../out/count_matrix/prosopis_count_matrix.txt", header = TRUE,
stringsAsFactors = FALSE)
head(count_matrix)
colnames(count_matrix) <- c("Gene_id","Chr","Start","End","Strand","Length",
"Ghaf12DT_002_CGATGT_L007","Ghaf2DT_005_ACAGTG_L007",
"Ghaf4DT_006_GCCAAT_L007","Ghaf6DT_007_CAGATC_L007",
"Ghaf8DT_009_GATCAG_L007","PCDT3.10b","PCDT3.12","PCDT3.2b",
"PCDT3.4b","PCDT3.6","PCDT3.8","PCDT4.10b","PCDT5.4b",
"PCDT5.8b","PDT5_10","PDT5_2","PDT5_6")
count_matrix <- count_matrix[,c(1, 7:23)]
pp <- as.data.frame(as.matrix(t(count_matrix)))
colnames(pp) <- pp[1,]
pp <- pp[-1,]
pp <- as.data.frame(lapply(pp, as.numeric))
PCA <- prcomp(pp)
PC <- as.data.frame(PCA$x)
meta <- read.table("../metadata/meta.txt", header = T)
PC <- cbind(meta, PC)
str(PC)
View(pp)
View(pp)
pp <- as.data.frame(lapply(pp, as.numeric))
PCA <- prcomp(pp)
PC <- as.data.frame(PCA$x)
head(pp)
View(PC)
library(deseq2)
library(DeSeq2)
library(DESeq2)
BiocManager::install("DESeq2")
exp_var<-PCA$sdev2
library(DESeq2)
exp_var<-PCA$sdev^2
View(pp)
View(count_matrix)
View(PC)
View(PCA)
View(meta_pros)
View(meta)
dds<-DESeqDataSetFromMatrix(countData = pp, colData = meta, design = -dex)
count_matrix <- count_matrix[,c(1, 7:23)]
#set workdir
setwd("~/Documentos/Prosopis_project/bin/")
#Charge data
count_matrix<-read.table("../out/count_matrix/prosopis_count_matrix.txt", header = TRUE,
stringsAsFactors = FALSE)
head(count_matrix)
colnames(count_matrix) <- c("Gene_id","Chr","Start","End","Strand","Length",
"Ghaf12DT_002_CGATGT_L007","Ghaf2DT_005_ACAGTG_L007",
"Ghaf4DT_006_GCCAAT_L007","Ghaf6DT_007_CAGATC_L007",
"Ghaf8DT_009_GATCAG_L007","PCDT3.10b","PCDT3.12","PCDT3.2b",
"PCDT3.4b","PCDT3.6","PCDT3.8","PCDT4.10b","PCDT5.4b",
"PCDT5.8b","PDT5_10","PDT5_2","PDT5_6")
count_matrix <- count_matrix[,c(1, 7:23)]
View(count_matrix)
pp <- as.data.frame(as.matrix(t(count_matrix)))
colnames(pp) <- pp[1,]
pp <- pp[-1,]
pp <- as.data.frame(lapply(pp, as.numeric))
View(pp)
PCA <- prcomp(pp)
PC <- as.data.frame(PCA$x)
View(PC)
PC <- as.data.frame(PCA$x)
meta <- read.table("../metadata/meta.txt", header = T)
PC <- cbind(meta, PC)
str(PC)
dds<-DESeqDataSetFromMatrix(countData = count_matrix, colData = meta, design = -dex)
dds<-DESeqDataSetFromMatrix(countData = count_matrix[-1,], colData = meta, design = -dex)
dds<-DESeqDataSetFromMatrix(countData = pp, colData = meta, design = -dex)
edgeRlist <- DGEList(counts = count_matrix,
group = meta,
genes = rownames(count_matrix))
library(edgeR)
edgeRlist <- DGEList(counts = count_matrix,
group = meta,
genes = rownames(count_matrix))
edgeRlist <- DGEList(counts = pp,
group = meta,
genes = rownames(pp))
rownames(count_matrix)<-count_matrix[,1]
count_matrix<-count_matrix[,-1]
edgeRlist <- DGEList(counts = count_matrix,
group = meta,
genes = rownames(count_matrix))
View(meta)
edgeRlist <- DGEList(counts = count_matrix,
group = meta$Sample,
genes = rownames(count_matrix))
str(edgeRlist)
dds<-DESeqDataSetFromMatrix(countData = count_matrix, colData = meta$Sample, design = -dex)
str(edgeRlist)
names(count_matrix)
keep <- rowSums(cpm(count_matrix) >= 5) >=2
table(keep)
count_matrix <- count_matrix[keep, ]
rownames(count_matrix)<-count_matrix[,1]
count_matrix<-count_matrix[,-1]
edgeRlist <- DGEList(counts = count_matrix,
group = meta$Sample,
genes = rownames(count_matrix))
View(count_matrix)
count_matrix <- read.table("prosopis_count_matrix.txt", header = T)
#set workdir
setwd("~/Documentos/Prosopis_project/bin/")
count_matrix <- read.table("prosopis_count_matrix.txt", header = T)
#Charge data
count_matrix<-read.table("../out/count_matrix/prosopis_count_matrix.txt", header = TRUE,
stringsAsFactors = FALSE)
colnames(count_matrix) <- c("Gene_id","Chr","Start","End","Strand","Length",
"Ghaf12DT_002_CGATGT_L007","Ghaf2DT_005_ACAGTG_L007",
"Ghaf4DT_006_GCCAAT_L007","Ghaf6DT_007_CAGATC_L007",
"Ghaf8DT_009_GATCAG_L007","PCDT3.10b","PCDT3.12","PCDT3.2b",
"PCDT3.4b","PCDT3.6","PCDT3.8","PCDT4.10b","PCDT5.4b",
"PCDT5.8b","PDT5_10","PDT5_2","PDT5_6")
count_matrix <- count_matrix[,c(1, 7:23)]
pp <- as.data.frame(as.matrix(t(count_matrix)))
colnames(pp) <- pp[1,]
pp <- pp[-1,]
pp <- as.data.frame(lapply(pp, as.numeric))
PCA <- prcomp(pp)
PCA$rotation
PC <- as.data.frame(PCA$x)
#set workdir
setwd("~/Documentos/Prosopis_project/bin/")
#Charge data
count_matrix<-read.table("../out/count_matrix/prosopis_count_matrix.txt", header = TRUE,
stringsAsFactors = FALSE)
colnames(count_matrix) <- c("Gene_id","Chr","Start","End","Strand","Length",
"Ghaf12DT_002_CGATGT_L007","Ghaf2DT_005_ACAGTG_L007",
"Ghaf4DT_006_GCCAAT_L007","Ghaf6DT_007_CAGATC_L007",
"Ghaf8DT_009_GATCAG_L007","PCDT3.10b","PCDT3.12","PCDT3.2b",
"PCDT3.4b","PCDT3.6","PCDT3.8","PCDT4.10b","PCDT5.4b",
"PCDT5.8b","PDT5_10","PDT5_2","PDT5_6")
count_matrix <- count_matrix[,c(1, 7:23)]
pp <- as.data.frame(as.matrix(t(count_matrix)))
colnames(pp) <- pp[1,]
pp <- pp[-1,]
pp <- as.data.frame(lapply(pp, as.numeric))
PCA <- prcomp(pp)
PCA$rotation
PC <- as.data.frame(PCA$x)
pc_eigenvalues <- PCA$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
# print the result
pc_eigenvalues
exp_pp <- pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained") +
theme(legend.title = element_text(size=16),
legend.text = element_text(size=12),
legend.text.align = 0,
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
view(exp_pp)
ggsave(filename = "../figures/exp_pp.png", device = "png", dpi = 300, width = 8, height = 8, units = "in")
print(exp_pp)
dev.off()
meta <- read.table("meta.txt", header = T)
PC <- cbind(meta, PC)
str(PC)
pro_PCA<-PC %>%
mutate(tree = as.factor(tree), month.Treatment = as.factor(month.Treatment)) %>%
ggplot(aes(x = PC1, y = PC2, color = tree, shape = month.Treatment)) +
geom_point(size = 4)
ggsave(filename = "../figures/PCA.png", device = "png", dpi = 300, width = 8, height = 8, units = "in")
print(pro_PCA)
dev.off()
library(tidyverse)
pro_PCA<-PC %>%
mutate(tree = as.factor(tree), month.Treatment = as.factor(month.Treatment)) %>%
ggplot(aes(x = PC1, y = PC2, color = tree, shape = month.Treatment)) +
geom_point(size = 4)
PC <- cbind(meta, PC)
meta <- read.table("../metadata/meta.txt", header = T)
PC <- cbind(meta, PC)
str(PC)
pro_PCA<-PC %>%
mutate(tree = as.factor(tree), month.Treatment = as.factor(month.Treatment)) %>%
ggplot(aes(x = PC1, y = PC2, color = tree, shape = month.Treatment)) +
geom_point(size = 4)
ggsave(filename = "../figures/PCA.png", device = "png", dpi = 300, width = 8, height = 8, units = "in")
print(pro_PCA)
names(count_matrix)
keep <- rowSums(cpm(count_matrix) >= 5) >=2
rownames(count_matrix)<-count_matrix[,1]
count_matrix<-count_matrix[,-1]
keep <- rowSums(cpm(count_matrix) >= 5) >=2
table(keep)
count_matrix <- count_matrix[keep, ]
edgeRlist <- DGEList(counts = count_matrix,
group = meta$Sample,
genes = rownames(count_matrix))
str(edgeRlist)
colnames(count_matrix)
edgeRlist <- calcNormFactors(edgeRlist, method = "TMM")
edgeRlist$samples
groups <- factor(sub("..$", "", colnames(count_matrix)))
table(groups)
groups <- factor(sub("", colnames(count_matrix)))
#create edgeR list
edgeRlist <- DGEList(counts = count_matrix,
group = meta$Sample,
genes = rownames(count_matrix))
str(edgeRlist)
#Normalized count by TMM
edgeRlist <- calcNormFactors(edgeRlist, method = "TMM")
edgeRlist$samples
str(edgeRlist)
#
cormat <- cor(cpm(edgeRlist$counts, log = T))
pheatmap(cormat, border_color = NA, main = "Correlation of replicates")
library(pheatmap)
#
cormat <- cor(cpm(edgeRlist$counts, log = T))
pheatmap(cormat, border_color = NA, main = "Correlation of replicates")
print(cormat)
cormat <- cor(cpm(edgeRlist$counts, log = T))
pheatmap(cormat, border_color = NA, main = "Correlation of replicates")
#heatmap
cormat <- cor(cpm(edgeRlist$counts, log = T))
pheatmap(cormat, border_color = NA, main = "Correlation of replicates")
ggsave(filename = "../figures/corr_plicates.png", device = "png", dpi = 300, width = 8, height = 8, units = "in")
print(cormat)
dev.off()
pdf("../figures//MD_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:18)) {
print(plotMD(cpm(edgeRlist, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
pdf("../figures/MD_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:18)) {
print(plotMD(cpm(edgeRlist, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
pdf("../figures/MD_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:17)) {
print(plotMD(cpm(edgeRlist, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
#We can verify the consistency of the replicas through a MD analysis
pdf("../out/dif_exp_DE/final_analysis/MDS_plots.pdf", height = 7, width = 10)
pch <- c(16,19,16,19,16,19)
colors <- rep(c("palevioletred1", "darkgreen", "magenta4", "yellowgreen", "violetred3", "green4"), 3)
plotMDS(edgeRlist, col=colors[groups], pch=pch[groups])
legend("topright", legend=levels(groups), pch=pch, col=colors, ncol=2)
dev.off()
pdf("../figures//MDS_plots.pdf", height = 7, width = 10)
pch <- c(16,19,16,19,16,19)
colors <- rep(c("palevioletred1", "darkgreen", "magenta4", "yellowgreen", "violetred3", "green4"), 3)
plotMDS(edgeRlist, col=colors[groups], pch=pch[groups])
legend("topright", legend=levels(groups), pch=pch, col=colors, ncol=2)
dev.off()
pdf("../figures//MDS_plots.pdf", height = 7, width = 10)
pch <- c(16,19,16,19,16,19)
colors <- rep(c("palevioletred1", "darkgreen", "magenta4", "yellowgreen", "violetred3", "green4"), 3)
plotMDS(edgeRlist, col=colors[groups], pch=pch[groups])
legend("topleft", legend=levels(groups), pch=pch, col=colors, ncol=2)
dev.off()
pdf("../figures/corr_rep_plots.pdf", height = 7, width = 10)
cormat <- cor(cpm(edgeRlist$counts, log = T))
pheatmap(cormat, border_color = NA, main = "P. cineraria correlation of replicates")
dev.off()
# Get log2 counts per million
jpeg("../figures/boxplot_logCPMs_norm.jpg")
logcounts <- cpm(edgeRlist,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("transformed logCPMs")
dev.off()
#Experiimental matrix design
design <- model.matrix(~0+edgeRlist$samples$group)
design
##the term ~0 tells the function not to include a column of intersections and only include as many columns as groups in our experimental design
colnames(design) <- levels(edgeRlist$samples$group)
#explore design
design
#set workdir
setwd("~/Documentos/Prosopis_project/bin/")
#Charge data
count_matrix<-read.table("../out/count_matrix/prosopis_count_matrix.txt", header = TRUE,
stringsAsFactors = FALSE)
View(count_matrix)
colnames(count_matrix) <- c("Gene_id","Chr","Start","End","Strand","Length",
"Ghaf12DT_002_CGATGT_L007","Ghaf2DT_005_ACAGTG_L007",
"Ghaf4DT_006_GCCAAT_L007","Ghaf6DT_007_CAGATC_L007",
"Ghaf8DT_009_GATCAG_L007","PCDT3.10b","PCDT3.12","PCDT3.2b",
"PCDT3.4b","PCDT3.6","PCDT3.8","PCDT4.10b","PCDT5.4b",
"PCDT5.8b","PDT5_10","PDT5_2","PDT5_6")
